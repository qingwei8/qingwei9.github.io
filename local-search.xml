<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Descheduler</title>
    <link href="/2021/08/09/descheduler/"/>
    <url>/2021/08/09/descheduler/</url>
    
    <content type="html"><![CDATA[<h1 id="Descheduler-学习记录"><a href="#Descheduler-学习记录" class="headerlink" title="Descheduler 学习记录"></a>Descheduler 学习记录</h1><p><a href="https://github.com/kubernetes-sigs/descheduler/tree/master">基于 descheduler v0.21.0</a></p><h2 id="1-资源平衡策略"><a href="#1-资源平衡策略" class="headerlink" title="1. 资源平衡策略"></a>1. 资源平衡策略</h2><p>基于当前版本 <code>v0.21.0</code>，Descheduler 已实现了 9种策略用于 kubernetes 集群的资源再平衡。</p><ul><li>RemoveDuplicates</li><li>LowNodeUtilization</li><li>HighNodeUtilization</li><li>RemovePodsViolatingInterPodAntiAffinity</li><li>RemovePodsViolatingNodeAffinity</li><li>RemovePodsViolatingNodeTaints</li><li>RemovePodsViolatingTopologySpreadConstraint</li><li>RemovePodsHavingTooManyRestarts</li><li>PodLifeTime</li></ul><p>这些策略包含一些共同的配置，分别如下：</p><ul><li><strong>nodeSelector</strong>：节点标签选择器，用来限制 descheduler 可在带有该标签的节点下进行处理，即限制 descheduler 驱逐在哪些节点上的 pod。</li><li><strong>evictLocalStoragePods</strong>：当值为 <code>true</code> 时，表示允许驱逐挂有 local storage 卷的 pods。默认为 <code>false</code>。</li><li><strong>evictSystemCriticalPods</strong>：当值为 <code>true</code> 时，会驱逐 kubernetes 中 kube-system 命名空间下以及任意优先级(priority)的系统关键 pod，这个操作很危险，不建议开启。默认为 <code>false</code>。</li><li><strong>ignorePvcPods</strong>：值为 <code>true</code> 不会（即忽略）驱逐挂载 pvc 卷的 pods。默认值为 <code>false</code>，即默认会驱逐挂载 pvc 的 pods。</li><li><strong>maxNoOfPodsToEvictPerNode</strong>：每个 node 可驱逐 pods 数量的最大值。pods 数量为各个策略统计的 pods 数量的总和。</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">nodeSelector:</span> prod=dev<br><span class="hljs-symbol">evictLocalStoragePods:</span> true<br><span class="hljs-symbol">evictSystemCriticalPods:</span> true<br><span class="hljs-symbol">maxNoOfPodsToEvictPerNode:</span> <span class="hljs-number">40</span>  <span class="hljs-comment">// 设置可驱逐的 pod 数量的最大值，保证一次不能驱逐太多，导致集群不稳定</span><br><span class="hljs-symbol">ignorePvcPods:</span> false<br><span class="hljs-symbol">strategies:</span><br>  ...<br><br></code></pre></td></tr></table></figure><h3 id="1-1-RemoveDuplicates"><a href="#1-1-RemoveDuplicates" class="headerlink" title="1.1. RemoveDuplicates"></a>1.1. RemoveDuplicates</h3><p>该策略可以确保在同一个 node 节点上只会运行<strong>一个</strong>相关联的 <strong>pod</strong>（这些 pods被同属一个相关的控制器（如 RS、RC、StatefulSet or Job）资源所管理，以下以 RS 为例），即同一个 RS 下的所有 pod 在集群中的所有节点中最多只有一个 pod 会运行在同一个 node 节点上。如果某个 node 节点上出现了同一个 RS 的多个 pod，则会将多余的 pod 驱逐掉，仅保留一个 pod 在该 node 节点上运行。该策略的应用场景为，当集群中的某些 node 因为不可知的原因导致硬件故障等下线后，该 node 节点上的 pod 会被调度到其他节点上（这时其他节点上可能会存在多个同属于一个 RS 的 pod 位于同一个 node 节点上），等待 node 重新上线后，该策略会驱逐其他节点中多余的 pod 并将驱逐的 pod 重新调度到 node 节点上。</p><p>参数：</p><ul><li><p>可选参数：<code>excludeOwerKinds</code> 列表类型，被参数中的所有 OwerRef 相关的 Kinds 所管理的 pods 不会被驱逐。但需<strong>注意：该策略会驱逐被 Deployment 所创建的 pod。如果需要 Deployment 所创建的 pod 不被驱逐，需要在参数中指定 ReplicaSet，而不是 Deployment。</strong></p><table><thead><tr><th align="center">Name</th><th align="center">Type</th></tr></thead><tbody><tr><td align="center">excludeOwerKinds</td><td align="center">list(string)</td></tr></tbody></table><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemoveDuplicates&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    params:</span><br><span class="hljs-symbol">      removeDuplicates:</span><br><span class="hljs-symbol">        excludeOwnerKinds:</span><br>        - <span class="hljs-string">&quot;ReplicaSet&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>过滤型参数</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th>说明</th></tr></thead><tbody><tr><td align="center">namespaces</td><td align="center">list</td><td>支持 include 和 exclude 两种过滤策略</td></tr><tr><td align="center">thresholdPriority</td><td align="center">int</td><td>直接指定驱逐优先级</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td>通过 k8s 的 priorityClass 来指点，如果 k8s 没有创建 priorityClass 会报错</td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td>true 为开启，开启时会优化驱逐调度，即会考虑 pod 是否满足驱逐条件，驱逐后是否有 node 可适合运行，如果没有则不会驱逐</td></tr></tbody></table></li></ul><h3 id="1-2-LowNodeUtilization"><a href="#1-2-LowNodeUtilization" class="headerlink" title="1.2. LowNodeUtilization"></a>1.2. LowNodeUtilization</h3><p>该策略会查找整个集群中 <code>未充分利用的节点</code>，并将其他 <code>高利用的节点</code> 中的一些 pod 驱逐并最终在这些 <code>未充分利用的节点</code> 上重建 pod。该策略的参数在 <code>nodeResourceUtilizationThresholds</code> 下配置。其中，还有另外两个非常关键的参数 <code>thresholds</code> 和 <code>targetThresholds</code>。</p><ul><li><code>thresholds</code>: 指定资源阀值（cpu/mem/pod 数量/gpu/其他可计算的资源），用来确定哪些节点是 <strong>未充分利用的节点</strong>。如果节点中的<strong>所有</strong>相关资源利用率<strong>都低于</strong> <code>thresholds</code> 中所指定资源的阀值，则可认为该节点为 <code>未充分利用的节点</code>。其中 pod 中 cpu/mem 等资源的值通过 k8s 中的 request 字段的值来进行计算。</li><li><code>targetThresholds</code>：用来确定哪些节点是<strong>高利用率的节点</strong>，是可被驱逐的。当节点中的<strong>任一</strong>相关资源利用率<strong>高于</strong> <code>targetThresholds</code> 中指定的阀值时，则可认为该节点是 <code>高利用率的节点</code>，节点上的 pod 可以被驱逐。</li></ul><p>当节点的所有资源利用率位于 <code>thresholds</code> 和 <code>targetThresholds</code> 时，则可认为该节点的利用率是合理的，节点上的 pod 将不会被驱逐。该策略的驱逐方向是从 <code>高利用率的的节点</code> 中驱逐 pod，并最终在 <code>未充分利用的节点</code> 上重建出 pod；且当 <code>高利用率的节点</code> 或者 <code>未充分利用的节点</code> 的节点数中有一个为 0 时将不再执行驱逐策略驱逐 pod。</p><p>参数：</p><ul><li>普通参数：<table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholds</td><td align="center">map[string]int</td><td align="left">设定阀值，确定 <code>未充分利用的节点</code> 的界限</td></tr><tr><td align="center">targetThresholds</td><td align="center">map[srting]int</td><td align="left">设定阀值，确定 <code>高利用率的节点</code> 的界限</td></tr><tr><td align="center">numberOfNodes</td><td align="center">int</td><td align="left">用来在大集群中来决定是否开启 <code>LowNodeUtilization</code> 策略的阀值，如果 numberOfNodes 不为 0 时，则当集群中 <code>未充分利用的节点</code> 大于 numberOfNodes 的值时会开启该策略；反之，不开启该策略。默认 numberOfNodes 为 0</td></tr></tbody></table></li><li>过滤型参数：<table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>说明：</p><ul><li><code>Descheduler</code> 内部原生支持三种资源类型：cpu、memory 以及 pods 数量。如果其中有资源类型的值没有指定，则默认设置为 100%，目的是避免将 <code>未充分利用的节点</code> 误统计为 <code>高利用的节点</code>。</li><li><code>Descheduler</code> 也支持可选择的扩展资源，比如支持 GPU 数量类型的资源 <code>nvidia.com/gpu</code>。如果指定了扩展资源，则 node 的节点的总资源利用率会将扩展资源算进去，如果没有指定扩展资源，则不会将该资源统计进去。</li><li>阀值选项 <code>thresholds</code> 和 <code>targetThresholds</code> 中的值不能为空，且对同一种资源指定要么全指定值要么全不指定值。</li><li>阀值选项 <code>thresholds</code> 和 <code>targetThresholds</code> 中对同一种资源中的值中，<code>thresholds</code> 的值必须小于或者等于（不能大于）<code>targetThresholds</code> 的对应类型资源的值。</li><li>阀值选项 <code>thresholds</code> 和 <code>targetThresholds</code> 中的资源类型的值必须为百分比值，且值必须位于 [0,100] 中。</li><li>numberOfNodes：参数用来触发是否开启该策略，如果 <code>未充分利用的节点数</code> 大于 numberOfNodes 时，将激活该策略，启动驱逐功能。否则，不启动该策略，numberOfNodes 的默认值为 0。</li><li>该策略是将 pod 从 <code>高利用率的节点</code> 上往 <code>低利用率的节点</code> 调，会让整个集群的整体资源平衡利用。</li></ul><p>例子：</p>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;LowNodeUtilization&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    params:</span><br><span class="hljs-symbol">      nodeResourceUtilizationThresholds:</span><br><span class="hljs-symbol">        thresholds:</span><br>          <span class="hljs-string">&quot;cpu&quot;</span> : <span class="hljs-number">20</span><br>          <span class="hljs-string">&quot;memory&quot;</span>: <span class="hljs-number">20</span><br>          <span class="hljs-string">&quot;pods&quot;</span>: <span class="hljs-number">20</span><br><span class="hljs-symbol">        targetThresholds:</span><br>          <span class="hljs-string">&quot;cpu&quot;</span> : <span class="hljs-number">50</span><br>          <span class="hljs-string">&quot;memory&quot;</span>: <span class="hljs-number">50</span><br>          <span class="hljs-string">&quot;pods&quot;</span>: <span class="hljs-number">50</span><br><br></code></pre></td></tr></table></figure><h3 id="1-3-HighNodeUtilization"><a href="#1-3-HighNodeUtilization" class="headerlink" title="1.3. HighNodeUtilization"></a>1.3. HighNodeUtilization</h3><p>该策略会将 <code>低利用率节点</code> 上的 pod 驱逐到 <code>高利用率节点</code> 上。该策略必须和 k8s 默认调度器策略中的优选策略 <code>MostRequestedPriority</code> 配合一起使用，在进行驱逐重调度时会给<code>高利用率的节点打上高分</code>。该策略的参数都配置在 <code>nodeResourceUtilizationThresholds</code> 下。</p><p>该策略也通过参数 <code>thresholds</code> 的阀值来确定哪些节点是 <code>低利用率的节点</code>，它所支持的资源类型包括 cpu、memory、pods 数量以及扩展资源类型等，当节点相关资源的实际申请使用率（以 k8s 中的 request 为准）<strong>都低于</strong> 参数阀值 <code>thresholds</code> 中 <strong>所有</strong> 相关资源所设定的值时，该节点会给认为是 <code>低利用率的节点</code>（未充分利用的节点）。节点中只要<strong>任一一个</strong>资源的使用率大于阀值 <code>thresholds</code> 中的同类型资源的值时，该节点被认为合理利用的节点，该节点上的 pod 将不会被驱逐。</p><p>注意，该策略是将 pod 的从 <code>低利用率的节点</code> 上驱逐并在合适的 <code>高利用率的节点</code> 上重建。当 <code>高利用率的节点</code> 或者 <code>未充分利用的节点</code> 的节点数中有一个为 0 时将不再执行驱逐策略驱逐 pod。</p><p>参数：</p><ul><li><p>普通参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholds</td><td align="center">map[string]int</td><td align="left">同上，设定阀值，确定 <code>未充分利用节点</code> 的界限</td></tr><tr><td align="center">numberOfNodes</td><td align="center">int</td><td align="left">同上，在大集群中确定开启该策略的阀值</td></tr></tbody></table></li><li><p>过滤型参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>说明：</p><ul><li>与 <code>LowNodeUtilization</code> 策略一样，该策略原生也支持 cpu、memory、pods 数量三种原生资源类型。如果资源类型未指定默认设置为 100%。</li><li>该策略也同样支持扩展资源（如 gpu 资源 <code>nvidia.com/gpu</code>），如果用户未指定扩展资源，该资源同样不参数 node 节点资源使用量的计算。</li><li>阀值 <code>thresholds</code> 同样不能为空。其资源的有效值为[0,100]。</li><li>numberOfNodes：参数用来触发是否开启该策略，如果 <code>未充分利用的节点数</code> 大于 numberOfNodes 时，将激活该策略，启动驱逐功能。否则，不启动该策略，numberOfNodes 的默认值为 0。</li><li>该策略是将 pod 从 <code>低利用率的节点</code> 上往 <code>高利用率的节点</code> 调，会让高利用率的节点利用率更高，低利用率的节点更低。该策略正好与 <code>LowNodeUtilization</code> 相反。</li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;HighNodeUtilization&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">       nodeResourceUtilizationThresholds:</span><br><span class="hljs-symbol">         thresholds:</span><br>           <span class="hljs-string">&quot;cpu&quot;</span> : <span class="hljs-number">20</span><br>           <span class="hljs-string">&quot;memory&quot;</span>: <span class="hljs-number">20</span><br>           <span class="hljs-string">&quot;pods&quot;</span>: <span class="hljs-number">20</span><br><br></code></pre></td></tr></table></figure><h3 id="1-4-RemovePodsViolatingInterPodAntiAffinity"><a href="#1-4-RemovePodsViolatingInterPodAntiAffinity" class="headerlink" title="1.4. RemovePodsViolatingInterPodAntiAffinity"></a>1.4. RemovePodsViolatingInterPodAntiAffinity</h3><p>该策略会确保同一个节点上的 pod 之间不违背 pod 的亲和性，如果同一个节点上 pod 之间存在反亲和性，则会将相关 pod 驱逐掉。比如，如果 node 上同时运行 podA、podB、podC 三个pod，podA 与 podB 和 podC 之间存在反亲和性，则该策略会将 podA 驱逐掉，以保证 podB 和 podC 能在 node 上正常运行。</p><p>参数</p><ul><li>过滤型参数<table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">namespaces</td><td align="center">list</td><td align="left">指定操作 namespace</td></tr><tr><td align="center">labelSelector</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemovePodsViolatingInterPodAntiAffinity&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br></code></pre></td></tr></table></figure><h3 id="1-5-RemovePodsViolatingNodeAffinity"><a href="#1-5-RemovePodsViolatingNodeAffinity" class="headerlink" title="1.5. RemovePodsViolatingNodeAffinity"></a>1.5. RemovePodsViolatingNodeAffinity</h3><p>该策略可以确保将所有违背 <code>节点亲和性</code> 的 pods 都从该 node 节点驱逐掉。在 k8s 中 <code>node 亲和性</code> 可通过参数<code>requiredDuringSchedulingIgnoredDuringExecution</code> 来指定，表示 <code>调度时调度器必须满足条件，执行时 kubelet 可忽略（即kubelet 不执行驱逐）</code> 策略。在开始是某个 podA 满足调度策略，k8s 调度器能将该 podA 调度到该 node 节点上，但随着一段时间后，podA 不在满足 node 的亲和性，此时传统的 k8s 机制 kubelet 是不能驱逐掉 podA 的；但当开启该策略时，该策略会驱使 kubelet 执行驱逐动作，使 node 上的有 <code>requiredDuringSchedulingIgnoredDuringExecution</code> 标签且有违反该 node 亲和性的 pod 将会被驱逐。</p><p>参数：</p><ul><li><p>普通参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">nodeAffinityType</td><td align="center">list(string)</td><td align="left">指明 pod 违背 node 的哪些亲和性类型，最终使 kubelet 执行驱逐动作</td></tr></tbody></table></li><li><p>过滤型参数</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">namespaces</td><td align="center">list</td><td align="left">include/exclude两个方案</td></tr><tr><td align="center">labelSelector</td><td align="center">list</td><td align="left">同k8s</td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemovePodsViolatingNodeAffinity&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    params:</span><br><span class="hljs-symbol">      nodeAffinityType:</span><br>      - <span class="hljs-string">&quot;requiredDuringSchedulingIgnoredDuringExecution&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-6-RemovePodsViolatingNodeTaints"><a href="#1-6-RemovePodsViolatingNodeTaints" class="headerlink" title="1.6. RemovePodsViolatingNodeTaints"></a>1.6. RemovePodsViolatingNodeTaints</h3><p>该策略会对违反 <code>node taints 污点</code>的 pod 进行驱逐。比如，在 pod 调度开始时，node 上含有污点 <code>NoSchedule</code>，且 podA 中也含有容忍(toleration) node 污点的标签 <code>key=value:NoSchedule</code>，此时该 podA 能被调度到 node 上运行，kubelet 也不会驱逐该 podA。随着一段时间后，将 node 上的污点更新了或者移除了等情况下，在原有 k8s 上 kubelet 不能将 pod 驱逐掉。如果开启该策略将会使 kubelet 去驱逐 podA。</p><p>参数：</p><ul><li>过滤型参数：<table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">namespaces</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">labelSelector</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemovePodsViolatingNodeTaints&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><br></code></pre></td></tr></table></figure><h3 id="1-7-RemovePodsViolatingTopologySpreadConstraint"><a href="#1-7-RemovePodsViolatingTopologySpreadConstraint" class="headerlink" title="1.7. RemovePodsViolatingTopologySpreadConstraint"></a>1.7. RemovePodsViolatingTopologySpreadConstraint</h3><p>该策略会对违反拓扑约束关系的 pod 从 node 上驱逐，以达到在k8s 中多个域之间平台 pod 数量的要求，以便实现 pods 之间更细粒度的调度，方便实现容灾和高可用。 topologySpreadConstraints 表示拓扑分布约束，可以控制 Pod 在某些节点的分布，可以在多个域之间平衡 Pod 数量，topologySpreadConstraints 策略是在 k8s v1.16第一次提出，在 v1.18 进入beta版默认开启，具体详情可参考 k8s v1.18 官方说明。因此该策略只在 k8s <code>v1.18</code> 以上版本中可用。</p><p>说明：</p><ul><li>该策略默认只处理<code>硬约束（hard constraints）</code>的条件，如果要处理 <code>软约束（soft constraints）</code>的条件，需要将参数 <code>includeSoftConstraints</code> 设置为 <code>true</code>。</li><li>该策略中的参数 <code>labelSelector</code> 在 <code>处理拓扑平衡域</code> 时不会生效，它只会在 驱逐 pod 阶段或者决定哪个 pod 可被驱逐时才生效。</li></ul><p>参数：</p><ul><li><p>普通参数：</p><table><thead><tr><th align="left">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">includeSoftConstraints</td><td align="center">bool</td><td align="left">默认不开启，如要开启需要设为 <code>true</code></td></tr></tbody></table></li><li><p>过滤型参数：</p><table><thead><tr><th align="left">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="left">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="left">namespaces</td><td align="center"></td><td align="left"></td></tr><tr><td align="left">labelSelector</td><td align="center"></td><td align="left"></td></tr><tr><td align="left">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemovePodsViolatingTopologySpreadConstraint&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">       includeSoftConstraints:</span> false<br><br></code></pre></td></tr></table></figure><h3 id="1-8-RemovePodsHavingTooManyRestarts"><a href="#1-8-RemovePodsHavingTooManyRestarts" class="headerlink" title="1.8. RemovePodsHavingTooManyRestarts"></a>1.8. RemovePodsHavingTooManyRestarts</h3><p>该策略会对 pod 重启次数太多的时候将 pod 驱逐，pod 重启原因有很多种，有因为 pod 的健康检查而一直重启，也有因为挂载卷不成功或者其他因素导致的 pod 重启，也有可能是 pod 所在的 node 因素导致的等，这种情况下该策略可将 pod 驱逐重建。</p><p>参数</p><ul><li><p>普通参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">podRestartThreshold</td><td align="center">int</td><td align="left">指定 pod 重启次数的阀值，当 pod 的重启次数大于该值时，将执行驱逐策略</td></tr><tr><td align="center">includingInitContainers</td><td align="center">bool</td><td align="left">计算 pod 的重启次数时，是否将 init container 的重启次数计算进去</td></tr></tbody></table></li><li><p>过滤型参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">namespaces</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">labelSelector</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">nodeFit</td><td align="center">bool</td><td align="left">同上</td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;RemovePodsHavingTooManyRestarts&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">       podsHavingTooManyRestarts:</span><br><span class="hljs-symbol">         podRestartThreshold:</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">         includingInitContainers:</span> true<br><br></code></pre></td></tr></table></figure><h3 id="1-9-PodLifeTime"><a href="#1-9-PodLifeTime" class="headerlink" title="1.9. PodLifeTime"></a>1.9. PodLifeTime</h3><p>该策略会驱逐长时间运行中的 pod，即根据设定的阀值以及 pod 的生命时长来决定是否驱逐 pod。目前仅支持对两种状态的 pod 进行驱逐，即 running 或 pending 状态的 pod。</p><p>参数</p><ul><li><p>普通参数：</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">maxPodLifeTimeSeconds</td><td align="center">int</td><td align="left">设定 pod 生命时长的驱逐阀值，该策略会驱逐大于该阀值的 pod</td></tr><tr><td align="center">podStatusPhases</td><td align="center">list</td><td align="left">指定可驱逐 pod 的状态，目前只支持驱逐状态为 running 和 pending 的 pod</td></tr></tbody></table></li><li><p>过滤型参数</p><table><thead><tr><th align="center">Name</th><th align="center">Type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">thresholdPriority</td><td align="center">int</td><td align="left">同上</td></tr><tr><td align="center">thresholdPriorityClassName</td><td align="center">string</td><td align="left">同上</td></tr><tr><td align="center">namespaces</td><td align="center"></td><td align="left"></td></tr><tr><td align="center">labelSelector</td><td align="center"></td><td align="left"></td></tr></tbody></table></li></ul><p>例子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;PodLifeTime&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">       podLifeTime:</span><br><span class="hljs-symbol">         maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br><span class="hljs-symbol">         podStatusPhases:</span><br>         - <span class="hljs-string">&quot;Pending&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-Pods-过滤参数详解"><a href="#2-Pods-过滤参数详解" class="headerlink" title="2. Pods 过滤参数详解"></a>2. Pods 过滤参数详解</h2><h3 id="2-1-Namespace-过滤"><a href="#2-1-Namespace-过滤" class="headerlink" title="2.1. Namespace 过滤"></a>2.1. Namespace 过滤</h3><p>Descheduler 中的策略可以通过 namespaces 参数来过滤以决定这些策略可以在哪些 namespaces 中生效或者。基于 namespaces 过滤方法共有两种，即 include 和 exclude 方法，include 表示策略可以在指定的 namespaces 中生效，而 exclude 则表示 <strong>排除</strong> 指定的 namespaces 后，策略可在其他 namespaces 中生效。如下策略支持 namespaces 过滤：</p><ul><li>PodLifeTime</li><li>RemovePodsHavingTooManyRestarts</li><li>RemovePodsViolatingNodeTaints</li><li>RemovePodsViolatingNodeAffinity</li><li>RemovePodsViolatingInterPodAntiAffinity</li><li>RemoveDuplicates</li><li>RemovePodsViolatingTopologySpreadConstraint</li></ul><p>如：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;PodLifeTime&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">        podLifeTime:</span><br><span class="hljs-symbol">          maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br><span class="hljs-symbol">        namespaces:</span><br><span class="hljs-symbol">          include:</span><br>          - <span class="hljs-string">&quot;namespace1&quot;</span><br>          - <span class="hljs-string">&quot;namespace2&quot;</span><br></code></pre></td></tr></table></figure><p>表示 <code>PodLifeTime</code> 策略仅在 <code>namespace1</code> 和 <code>namespace2</code> 中生效。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;PodLifeTime&quot;</span>:<br><span class="hljs-symbol">     enabled:</span> true<br><span class="hljs-symbol">     params:</span><br><span class="hljs-symbol">        podLifeTime:</span><br><span class="hljs-symbol">          maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br><span class="hljs-symbol">        namespaces:</span><br><span class="hljs-symbol">          exclude:</span><br>          - <span class="hljs-string">&quot;namespace1&quot;</span><br>          - <span class="hljs-string">&quot;namespace2&quot;</span><br></code></pre></td></tr></table></figure><p>表示 <code>PodLifeTime</code> 策略可在 <strong>除了</strong> <code>namespace1</code> 和 <code>namespace2</code> 的其他所有 namespaces 中生效。</p><h3 id="2-2-Priority-优先级过滤"><a href="#2-2-Priority-优先级过滤" class="headerlink" title="2.2. Priority 优先级过滤"></a>2.2. Priority 优先级过滤</h3><p>Descheduler 中的 <code>所有策略</code> 都可以指定 <code>优先级过滤</code>，优先级策略通过一个优先级阀值来指定，只有当 pod 的优先级值<strong>小于</strong>该阀值时才能被 Descheduler 驱逐。有两种方式来指定优先级策略（默认情况下通过 <code>system-cluster-critical</code> priorityClass 来指定优先级的阀值。）：</p><ul><li><code>thresholdPriority</code>：直接通过一个 int 数值来指定。</li><li><code>thresholdPriorityClassName</code>：通过 k8s 的 <code> priority class</code> 来进行关联，<code> priority class</code> 中具体会指定优先级的数值。如果策略中指定的 <code>priority class</code> 在 k8s 集群中没有创建（不存在），则会直接报错。</li><li><strong>注意</strong>：上述两个优先级只能使用其中一种。在一个策略中不能同时指定上述两种优先级。</li><li><strong>注意</strong>：如果 <code>evictSystemCriticalPods</code> 设置为 <code>true</code>，将会驱逐系统关键 pod，且设置的所有 <code>优先级策略</code> 都将 <strong>无效</strong>。</li></ul><p>例子</p><ul><li><p><code>thresholdPriority</code> 方式：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;PodLifeTime&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    params:</span><br><span class="hljs-symbol">        podLifeTime:</span><br><span class="hljs-symbol">          maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br><span class="hljs-symbol">        thresholdPriority:</span> <span class="hljs-number">10000</span><br></code></pre></td></tr></table></figure></li><li><p><code>thresholdPriorityClassName</code> 方式：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-symbol">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-symbol">strategies:</span><br>  <span class="hljs-string">&quot;PodLifeTime&quot;</span>:<br><span class="hljs-symbol">    enabled:</span> true<br><span class="hljs-symbol">    params:</span><br><span class="hljs-symbol">        podLifeTime:</span><br><span class="hljs-symbol">          maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br><span class="hljs-symbol">        thresholdPriorityClassName:</span> <span class="hljs-string">&quot;priorityclass1&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-Label-标签过滤"><a href="#2-3-Label-标签过滤" class="headerlink" title="2.3. Label 标签过滤"></a>2.3. Label 标签过滤</h3><p>如下策略支持通过 k8s 的标准标签过滤器（<code>labelSelector</code>）来过滤需要驱逐指定的 pod。</p><ul><li>PodLifeTime</li><li>RemovePodsHavingTooManyRestarts</li><li>RemovePodsViolatingNodeTaints</li><li>RemovePodsViolatingNodeAffinity</li><li>RemovePodsViolatingInterPodAntiAffinity</li><li>RemovePodsViolatingTopologySpreadConstraint</li></ul><p>例子</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">&quot;descheduler/v1alpha1&quot;</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">&quot;DeschedulerPolicy&quot;</span><br><span class="hljs-attr">strategies:</span><br>  <span class="hljs-attr">&quot;PodLifeTime&quot;:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">params:</span><br>      <span class="hljs-attr">podLifeTime:</span><br>        <span class="hljs-attr">maxPodLifeTimeSeconds:</span> <span class="hljs-number">86400</span><br>      <span class="hljs-attr">labelSelector:</span><br>        <span class="hljs-attr">matchLabels:</span><br>          <span class="hljs-attr">component:</span> <span class="hljs-string">redis</span><br>        <span class="hljs-attr">matchExpressions:</span><br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">tier</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">cache</span>]&#125;<br>          <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">key:</span> <span class="hljs-string">environment</span>, <span class="hljs-attr">operator:</span> <span class="hljs-string">NotIn</span>, <span class="hljs-attr">values:</span> [<span class="hljs-string">dev</span>]&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-Node-fit-过滤"><a href="#2-4-Node-fit-过滤" class="headerlink" title="2.4. Node fit 过滤"></a>2.4. Node fit 过滤</h3><p>Descheduler 中以下策略支持 nodeFit 过滤来优化驱逐调度的选择。</p><ul><li>RemoveDuplicates</li><li>LowNodeUtilization</li><li>HighNodeUtilization</li><li>RemovePodsViolatingInterPodAntiAffinity</li><li>RemovePodsViolatingNodeAffinity</li><li>RemovePodsViolatingNodeTaints</li><li>RemovePodsViolatingTopologySpreadConstraint</li><li>RemovePodsHavingTooManyRestarts</li></ul><p>如果 nodeFit 为 <code>true</code>，则 descheduler 在驱逐 pod 时会考虑驱逐的 pod 是否满足可驱逐的标准，并且可驱逐的 pod 是否可以重新调度到其他 node 节点上，如果 pod 不能重新调度到其他 node 节点上，则不会驱逐该 pod。当前 pod 是否可驱逐的标准如下：</p><ul><li>pod 中是否有 nodeSelector 标签选择器</li><li>pod 中有可容忍 node 的污点，即 pod 中有 <code>Tolerations</code> 标签， node 有对应的 <code>Taints</code> 标签</li><li>pod 中有 <code>nodeAffinity</code></li><li>是否有其他 node 节点被标记为 <code>unschedulable</code></li></ul><p><strong>注意</strong>：<code>nodeFit</code> 过滤是基于 pod 的 spec 进行过滤的，并不会关联 pod 的 <code>owner</code>；如果 pod 的 owner（比如 RC 等）被修改了但 pod 的 spec 未被修改，这时 nodeFit 的过滤将会引用 pod 旧的 spec 信息。 这种行为在 Descheduler 中时可允许的或者说不严重的，因为 Descheduler 的机制是 <code>尽最大努力</code> 来进行资源的再度平衡。当然如果想实时得到 pod 的最新信息，可以使用 <code>Deployment</code> 来代替 RC，Deployment 会实现自动同步更新 pod 的 spec 的功能，以保证集群中 pod 的最新信息。</p><h2 id="3-Pod-驱逐说明"><a href="#3-Pod-驱逐说明" class="headerlink" title="3. Pod 驱逐说明"></a>3. Pod 驱逐说明</h2><p>Descheduler 中从 node 中驱逐一个 pod 必须遵守以下机制：</p><ul><li><code>Critical pods</code>：通过 <code>PriorityClassName</code> 设置的 <code>system-cluster-critical</code> 或者 <code>system-node-critical</code> 关键性 pod 永远不会被驱逐，除非将 <code>evictSystemCriticalPods</code> 设置为 <code>true</code>。</li><li><code>静态 pod</code>、<code>kubelet 直接用镜像启动的pod</code>、<code>孤儿 pod</code> 等不被 ReplicationController, ReplicaSet(Deployment), StatefulSet, or Job 等控制器管理的 pod 永远不会被驱逐。因为一旦驱逐了，这些 pod 将永远不会被拉起来。</li><li>被 DaemonSets 管理的 pod 永远不会被驱逐。</li><li>pod 中使用本地存储卷的（local storage）不会被驱逐，除非将 <code>evictLocalStoragePods</code> 设为 <code>true</code>。</li><li>pod 中使用 PVCs 的默认是可以被驱逐的，可通过设置 <code>ignorePvcPods</code> 为 <code>true</code> 来保证 <strong>不被</strong> 驱逐。</li><li>在 <code>LowNodeUtilization</code> 和 <code>RemovePodsViolatingInterPodAntiAffinity</code> 中，pod 的驱逐优先级是从低到高，当 pod 之间的优先级相同时，会根据 k8s 的 Qos 等级来进行驱逐，即 <code>best effort</code> 先驱逐，其次 <code> burstable</code>，最后 <code>guaranteed</code>。</li><li>所有 pod 中如果有<code>注释:descheduler.alpha.kubernetes.io/evict</code>，则表明该 pod 可以被驱逐。这种情况下，用户可根据需求以及 pod 的信息来特定指定可驱逐的 pod。</li></ul><h2 id="4-其他："><a href="#4-其他：" class="headerlink" title="4. 其他："></a>4. 其他：</h2><ul><li>设置 –v=4 或者更大的值，Descheduler 的日志中会打印出任一 pod 不能被驱逐的原因。</li><li>Descheduler 的驱逐信息可通过 <code> https://localhost:10258/metrics</code> 地址进行查看，地址可以通过参数 <code>--binding-address</code> 更改，基于 https的安全端口号可以通过参数 <code>--secure-port</code> 更改。<table><thead><tr><th align="center">name</th><th align="center">type</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">build_info</td><td align="center">gauge</td><td align="left">constant 1</td></tr><tr><td align="center">pods_evicted</td><td align="center">CounterVec</td><td align="left">total number of pods evicted</td></tr></tbody></table></li></ul><h2 id="猜你喜欢"><a href="#猜你喜欢" class="headerlink" title="猜你喜欢"></a>猜你喜欢</h2><ul><li><a href="./hello-world.md">hello world</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
      <category>kubernetes</category>
      
      <category>descheduler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>descheduler</tag>
      
      <tag>云原生</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/08/09/hello-world/"/>
    <url>/2021/08/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
